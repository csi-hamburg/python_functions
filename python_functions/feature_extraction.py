# AUTOGENERATED! DO NOT EDIT! File to edit: ../03_feature_extraction.ipynb.

# %% auto 0
__all__ = ['extract_roi_information']

# %% ../03_feature_extraction.ipynb 3
def extract_roi_information(
    image_path, # Path to the 3D image 
    atlas_path, # Path to the 4D atlas
    atlas_labels, # List of labels
    aggregation="mean" # Method of aggregation ("mean", "sum", or "load")
    ):
    """
    Extracts ROI information from a given image using a specified atlas.
    
    Returns:
    - array: An array with aggregated ROI values
    """

    import numpy as np
    import nibabel as nib
    
    # Load the data
    image = nib.load(str(image_path)).get_fdata()
    atlas = nib.load(atlas_path).get_fdata()
    
    assert np.all(np.isin(image, [0, 1])), "WMH mask must be binary"
    assert np.all(np.isin(atlas, [0, 1])), "atlas must be binary"
    assert image.shape == atlas.shape[:-1], "Spatial dimensions of the image and atlas do not match"
    assert atlas.ndim == 4, "atlas must be 4d"
    assert len(atlas_labels) == atlas.shape[3], "atlas_labels and 4th dimension of atlas must have the same length"
    
    if aggregation == "mean":
        values = np.sum(image[..., np.newaxis] * atlas, axis=(0, 1, 2)) / np.sum(atlas, axis=(0, 1, 2))
    elif aggregation == "sum":
        values = np.sum(image[..., np.newaxis] * atlas, axis=(0, 1, 2))
    elif aggregation == "load":
        values = np.sum(image[..., np.newaxis] * atlas, axis=(0, 1, 2)) / np.sum(atlas > 0, axis=(0, 1, 2))
    else:
        raise ValueError("aggregation must be 'mean', 'sum', or 'load'")

    return values

# Use the function as:
# result = extract_roi_information(image_path, atlas_path, atlas_labels)


